efct: |
  FUNC : main 1 1 0
  # args:
  # 0: the string to look in, and then the match (if it's found)
  # 1: the pattern, and then the group idx (if there's a match) or group name
  call_Stream:stdinLine # try to read the haystack string
  svar 1
  pvar 1
  type False
  gofi 7                # jump to reading the pattern string
  int  1
  rtrn
  call_Stream:stdinLine # try to read the pattern string
  svar 2
  pvar 2
  type False
  gofi 14             # jump to trying the match
  int  2
  rtrn
  pvar 1              # try the match
  pvar 2
  call_String:regex
  svar 1
  pvar 1
  type False
  gofi 25             # jump to reporting the matches
  str  "Didn't find a match\n"
  call_String:sout
  int  0
  rtrn
  str  "Found a match:\n" # report the matches
  call_String:sout
  int  0              # for idx = 0 ; ...
  svar 2
  pvar 1
  call_Match:groupCount
  pvar 2              # idx <= groupCount
  call_Integer:le
  gofi 51             # jump to after the loop
  pvar 2              # print "${idx}: ${group capture}"
  call_native:toString
  call_String:sout
  str  ": "
  call_String:sout
  pvar 1
  pvar 2
  call_Match:igroup
  call_native:toString # in case igroup led to False
  call_String:sout
  str  "\n"
  call_String:sout
  pvar 2              # ++idx
  int  1
  call_Integer:add
  svar 2
  goto 29
  call_Stream:stdinLine # read stdin for named groups to report on
  svar 2
  pvar 2
  type False
  goif 68             # exit 0
  pvar 2              # print "${name}: ${group capture}"
  call_String:sout
  str  ": "
  call_String:sout
  pvar 1
  pvar 2
  call_Match:ngroup
  call_native:toString # in case it's False
  call_String:sout
  str  "\n"
  call_String:sout
  goto 51             # jump back up to reading stdin
  int  0              # exit 0
  rtrn
runs:
- description: just numbered
  in: |
    hello world
    .*o (.*)
  out: |
    Found a match:
    0: "hello world"
    1: "world"
  exit: 0
- description: empty numbered group
  in: |
    hello world
    .*o (goodbye)?(.*)
  out: |
    Found a match:
    0: "hello world"
    1: False
    2: "world"
  exit: 0
- description: named groups
  in: |
    hello world
    .*o (?<head>.)(?<tail>.*)
    head
    or
    tail
  out: |
    Found a match:
    0: "hello world"
    1: "w"
    2: "orld"
    head: "w"
    or: False
    tail: "orld"
  exit: 0
- description: no match
  in: |
    hello world
    good(bye)?
  out: |
    Didn't find a match
  exit: 0
