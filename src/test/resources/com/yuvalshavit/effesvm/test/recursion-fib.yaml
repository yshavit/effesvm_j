efct: |
  FUNC : main 1 1 0
  call_String:sin
  typp False
  goif 10             # exit 0
  call_Integer:parse
  call : fib
  call_native:toString
  call_String:sout
  str   "\n"
  call_String:sout
  goto 0              # read the next line
  pop                 # pop the False
  int 0
  rtrn

  FUNC : fib 1 1 0
  # arg0: n
  pvar 0
  int  1
  call_Integer:le
  gofi 6            # go to fib(n-1) + fib(n-2)
  pvar 0
  rtrn
  pvar 0            # fib(n-1) + fib(n-2)
  int  1
  call_Integer:sub
  call : fib
  pvar 0
  int  2
  call_Integer:sub
  call : fib
  call_Integer:add
  rtrn
runs:
- description: first few
  exit: 0
  in: |
    1
    2
    3
    4
    5
    6
    7
  out: |
    1
    1
    2
    3
    5
    8
    13
