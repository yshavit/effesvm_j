efct: |
  FUNC : main 0 3 0
  # vars:
  # 0: beginning int
  # 1: end int
  # 2: idx
  call : readInt          # read min
  svar 0
  pvar 0
  call_Boolean:isFalse
  gofi 7                  # jump to reading max
  int  1
  rtrn
  call : readInt          # read max
  svar 1
  pvar 1
  call_Boolean:isFalse
  gofi 14                 # jump to the "for" loop initializer
  int  2
  rtrn
  pvar 0                  # for (local2 = local0 ; ...
  svar 2
  pvar 2                  # if local2 < local1, jump to "for" body
  pvar 1
  call_Integer:lt
  goif 21
  goto 31                 # otherwise, jump to exit 0 to exit "for" loop
  pvar 2                  # print local1
  call_native:toString
  call_String:sout
  str  "\n"
  call_String:sout
  pvar 2                  # ++local2
  int  1
  call_Integer:add
  svar 2
  goto 16                 # top of the loop
  int  0                  # normal exit
  rtrn

  FUNC : readInt 0 1 0
  # reads a line from stdin, parses it as an int. Returns that Integer, or False if any errors
  call_String:sin
  svar 0
  pvar 0
  call_Boolean:isFalse
  goif 8               # jump to bool False
  pvar 0
  call_Integer:parse
  rtrn
  bool False
  rtrn
runs:
- description: 1 to 5
  in: |
    1
    5
  out: |
    1
    2
    3
    4
  exit: 0
- description: 6 to 8
  in: |
    6
    8
  out: |
    6
    7
  exit: 0
- description: nothing given
  exit: 1
- description: only min given
  in: 5
  exit: 2
- description: min isn't valid
  in: one
  exit: 1
- description: max isn't valid
  in: |
    0
    two
  exit: 2
- description: from 5 to 3
  in: |
    5
    3
  exit: 0

